cmake_minimum_required(VERSION 3.14)
project(example)
include(ExternalProject)
include(FetchContent)


set(CMAKE_BUILD_TYPE "Debug")
set(CMAKE_CXX_FLAGS " -pthread -std=c++14 -funroll-loops -O3 -march=native")
set(CMAKE_CXX_FLAGS_DEBUG "$ENV{CXXFLAGS} -O0 -Wall -g -ggdb")
set(CMAKE_CXX_FLAGS_RELEASE "$ENV{CXXFLAGS} -O3 -Wall")

find_program(MAKE_EXE NAMES gmake nmake make)
set(GIT_HOST "ghproxy.com/https://github.com")


set(_VCPKG_BIN ${CMAKE_CURRENT_BINARY_DIR}/_exts/src/vcpkg/vcpkg)
set(_VCPKG_CMAKE 
  ${CMAKE_CURRENT_BINARY_DIR}/_exts/src/vcpkg/scripts/buildsystems/vcpkg.cmake)
set(_VCPKG_EXISTS FALSE)
set(CMAKE_TOOLCHAIN_FILE ${_VCPKG_CMAKE})

if (EXISTS ${_VCPKG_BIN})
  message(
    STATUS 
    "vcpkg already located at ${_VCPKG_BIN}")
  set(_VCPKG_EXISTS TRUE)
else()
  ExternalProject_Add(
    vcpkg
    PREFIX _exts 
    GIT_REPOSITORY https://${GIT_HOST}/microsoft/vcpkg.git  
    GIT_TAG 2022.02.02 
    GIT_PROGRESS TRUE 
    CONFIGURE_COMMAND ""
    BUILD_COMMAND "" 
    INSTALL_COMMAND <INSTALL_DIR>/src/vcpkg/bootstrap-vcpkg.sh)
  ExternalProject_Add_Step(
    vcpkg deps 
    COMMAND ${_VCPKG_BIN} install --vcpkg-root ${CMAKE_SOURCE_DIR} 
    DEPENDEES install)
endif()


find_package(ZLIB REQUIRED)
find_package(fmt CONFIG REQUIRED)


add_executable(example "./example.cpp")
if (NOT ${_VCPKG_EXISTS})
  add_dependencies(example vcpkg)
endif()
#target_link_libraries(main PRIVATE ZLIB::ZLIB fmt::fmt)
